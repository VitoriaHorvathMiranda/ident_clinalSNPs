magica_table %>%
mutate(n_pops = map_dbl(data, nrow)) %>%
filter(n_pops > 2) %>%
select(!n_pops) %>%
mutate(coefficients = map_dbl(models, ~coef(.x) %>% pluck("latitude"))) %>%
mutate(p_value = map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8))) %>%
slice_max(n = 10, coefficients)
magica_table %>%
mutate(n_pops = map_dbl(data, nrow)) %>%
filter(n_pops > 2) %>%
select(!n_pops) %>%
mutate(coefficients = map_dbl(models, ~coef(.x) %>% pluck("latitude"))) %>%
mutate(p_value = map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8))) %>%
top_n(n = 10)
magica_table %>%
mutate(n_pops = map_dbl(data, nrow)) %>%
filter(n_pops > 2) %>%
select(!n_pops) %>%
mutate(coefficients = map_dbl(models, ~coef(.x) %>% pluck("latitude"))) %>%
mutate(p_value = map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8))) %>%
top_n(n = 5, wt = coefficients)
?sort
magica_table %>%
mutate(n_pops = map_dbl(data, nrow)) %>%
filter(n_pops > 2) %>%
select(!n_pops) %>%
mutate(coefficients = map_dbl(models, ~coef(.x) %>% pluck("latitude"))) %>%
mutate(p_value = map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8))) %>%
top_n(., n = 5, wt = coefficients)
magica_table %>%
mutate(n_pops = map_dbl(data, nrow)) %>%
filter(n_pops > 2) %>%
select(!n_pops) %>%
mutate(coefficients = map_dbl(models, ~coef(.x) %>% pluck("latitude"))) %>%
mutate(p_value = map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8))) %>%
top_n(., n = 5, wt = p_value)
magica_table %>%
mutate(n_pops = map_dbl(data, nrow)) %>%
filter(n_pops > 2) %>%
select(!n_pops) %>%
mutate(coefficients = map_dbl(models, ~coef(.x) %>% pluck("latitude"))) %>%
mutate(p_value = map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8)))
magica_table %>%
mutate(n_pops = map_dbl(data, nrow)) %>%
filter(n_pops > 2) %>%
select(!n_pops) %>%
mutate(coefficients = map_dbl(models, ~coef(.x) %>% pluck("latitude"))) %>%
mutate(p_value = map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8))) %>%
slice_max(coefficients)
magica_table %>%
mutate(n_pops = map_dbl(data, nrow)) %>%
filter(n_pops > 2) %>%
select(!n_pops) %>%
mutate(coefficients = map_dbl(models, ~coef(.x) %>% pluck("latitude"))) %>%
mutate(p_value = map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8))) |>
top_n(n = 5, wt = coefficients)
pop_test_lite[, .(glm(freq~latitude,
weights = NE,
data = .SD,
family = binomial())),
by = position2]
View(pop_test_lite)
library(data.table)
library(tidyverse)
pop_test <- fread("/dados/time_clines/output/SNPs/joined97.tsv")
pop_test
pop_test_lite <- pop_test[chrom == "2L",]
View(pop_test_lite)
pop_test_lite[position == 11994070]
test_depth0 <- pop_test_lite[position == 11994070]
glm(freq~latitude, weights = NE,
data = test_depth0,
family = binomial())
MCT97.NE <- fread("/dados/time_clines/output/SNPs/MCT97_L002.NE.tsv")
View(MCT97.NE)
MCT97.NE[chrom=="2L",][position == 11994070]
rm(MCT97.NE)
MCT97_filtered_pool <- fread("/dados/time_clines/data/seqs/calls/MCT97_L002_filtered.pool")
MCT97_filtered_pool
MCT97_filtered_pool <- fread("/dados/time_clines/data/seqs/calls/MCT97_L002_filtered.pool",
sep = "\t", header = FALSE)
snape_col_names <-  c("chrom", "position",
"ref_base", "ref_count",
"alt_count", "ref_qual",
"alt_qual", "bases",
"prob", "p(1)", "freq")
setnames(MCT97_filtered_pool, paste("V", 1:11, sep = ""), snape_col_names)
MCT97_filtered_pool
MCT97_filtered_pool[chrom == "2L",][position == 11994070]
MCT97_filtered_pool[chrom == "2L",][position == 11994070]
rm(pop_test)
MCT97_samtoolsDepth <- fread("MCT97.samtoolsDepth.tsv",
sep = "\t",
header = FALSE)
setnames(samtoolsDepth, paste("V", 1:3, sep = ""), c("chrom", "position", "depth"))
MCT97_filtered_pool[chrom == "2L",][position == 11994070]
MCT97_samtoolsDepth[chrom == "2L",][position == 11994070]
setnames(MCT97_samtoolsDepth, paste("V", 1:3, sep = ""), c("chrom", "position", "depth"))
MCT97_samtoolsDepth[chrom == "2L",][position == 11994070]
MCT97_samtoolsDepth <- fread("MCT97.samtoolsDepth.tsv",
sep = "\t",
header = FALSE)
setnames(MCT97_samtoolsDepth, paste("V", 1:3, sep = ""), c("chrom", "position", "depth"))
MCT97_samtoolsDepth[chrom == "2L",][position == 11994070]
rm(MCT97_filtered_pool, MCT97_samtoolsDepth, test_depth0)
rm(snape_col_names)
pop_test_lite[, position2 := paste(chrom, position)]
pop_test_lite
pop_test_lite[, position2 := paste(chrom, position, sep = ":")]
pop_test_lite
pop_test_lite <- pop_test_lite[, !c("chrom", "position")]
pop_test_lite[depth>0,]
#tidyverse and data.table try:
#data.table function for nesting:
group_nest_dt <- function(dt, ..., .key = "data"){
stopifnot(is.data.table(dt))
by <- substitute(list(...))
dt <- dt[, list(list(.SD)), by = eval(by)]
setnames(dt, old = "V1", new = .key)
dt
}
pop_test_lite[depth>0,][, group_nest_dt(.SD, position2)]
pop_test_lite[depth>0,][, group_nest_dt(.SD, position2)][1:500,] %>% View()
View(.[[2]][[1]])
View(.[[2]][[1]])
test <- pop_test_lite[depth>0,][, group_nest_dt(.SD, position2)][1,]
test
test[2,]
test[,[2]]
test[,2]
test[,2][1]
test[,2] %>% pluck()
test[,2] %>% pluck(1)
test <- pop_test_lite[depth>0,][, group_nest_dt(.SD, position2)]
test[,2] %>% pluck(1) %>% head(10)
test[10000:10010,]
test[10000:10010,][position2 == 2L:622893, ] %>% pluck(2)
test[10000:10010,][position2 == 2L:622893, ]
test[10000:10010,][position2 == "2L:622893", ]
test[10000:10010,][position2 == "2L:622893", ] %>% pluck(2)
pop_test_lite[depth>0,][, group_nest_dt(.SD, position2)][,
n_pops := purrr::map_dbl(data, nrow)
]
pop_test_lite
test[,n_pops := purrr::map_dbl(data, nrow)]
test
test[,n_pops := purrr::map_dbl(data, nrow)][n_pops>2,]
library(data.table)
library(tidyverse)
library(broom)
#11994070 - 2L
pop_test <- fread("/dados/time_clines/output/SNPs/joined97.tsv")
pop_test_lite <- pop_test[chrom == "2L",]
pop_test_lite[, position2 := paste(chrom, position, sep = ":")]
pop_test_lite <- pop_test_lite[, !c("chrom", "position")]
#tidyverse and data.table try:
#data.table function for nesting:
group_nest_dt <- function(dt, ..., .key = "data"){
stopifnot(is.data.table(dt))
by <- substitute(list(...))
dt <- dt[, list(list(.SD)), by = eval(by)]
setnames(dt, old = "V1", new = .key)
dt
}
test <- pop_test_lite[depth>0,][, group_nest_dt(.SD, position2)]
rm(test)
nested_test <- pop_test_lite[depth>0,][, group_nest_dt(.SD, position2)]
test[,n_pops := purrr::map_dbl(data, nrow)][n_pops>2,][,!n_pops]
nested_test[,n_pops := purrr::map_dbl(data, nrow)][n_pops>2,][,!n_pops]
nested_test[,n_pops := purrr::map_dbl(data, nrow)][n_pops>2,]
nested_test[,n_pops := purrr::map_dbl(data, nrow)][n_pops>2,][,.(!n_pops)]
nested_test[,n_pops := purrr::map_dbl(data, nrow)][n_pops>2,][,.(!c(n_pops))]
n_pops>2,][,
.(!c("n_pops"), with = FALSE)]
nested_test[,n_pops := purrr::map_dbl(data, nrow)][n_pops>2,][,.(!c("n_pops"), with = FALSE)]
nested_test[,n_pops := purrr::map_dbl(data, nrow)][n_pops>2,][,!c("n_pops"), with = FALSE]
n_pops>2,][,!c("n_pops"), with = FALSE][, models := purrr::map(
data, ~ glm(freq~latitude, weights = NE,
data = .x,
family = binomial()))]
nested_test_filtered <- nested_test[,n_pops := purrr::map_dbl(data, nrow)][
n_pops>2,][,!c("n_pops"), with = FALSE]
nested_test_filtered[, models := purrr::map(data, ~ glm(freq~latitude,
weights = NE,
data = .x,
family = binomial()))]
nested_test_filtered
nested_test_filtered[, coefficients := purrr::map_dbl(models, ~coef(.x) %>% pluck("latitude")) ]
nested_test_filtered
nested_test_filtered
nested_test_filtered[, p_value := purrr::map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8))]
nested_test_filtered
pop_test_lite[depth>0,][, group_nest_dt(.SD, position2)][,n_pops := purrr::map_dbl(data, nrow)][
n_pops>2,][,!c("n_pops"), with = FALSE]
?saveRDS
library(data.table)
?fread
glm_test <- fread("glm_test97.RDS")
glm_test <- readRDS("glm_test97.RDS")
install.packages("feather")
library(feather)
library(feather)
#11994070 - 2L
pop_test <- fread("/dados/time_clines/output/SNPs/joined97.tsv")
pop_test[chrom = "3L",]
pop_test[chrom == "2L",]
pop_test[chrom == "3L",]
pop_test[chrom == "3L",]
rm(pop_test)
glm_3L_97 <- read_feather("glm_test_3L_97.feather")
read_feather("glm_test_3L_97.feather")
glm_3L_97 <- read_feather('glm_test_3L_97.feather')
path <- 'glm_test_3L_97.feather'
glm_3L_97 <- read_feather(path)
rm(path)
#11994070 - 2L
pop_test <- fread("/dados/time_clines/output/SNPs/joined97.tsv")
pop_test_lite <- pop_test[chrom == "2L",]
rm(pop_test)
pop_test_lite[, position2 := paste(chrom, position, sep = ":")]
#tidyverse and data.table try:
#data.table function for nesting:
group_nest_dt <- function(dt, ..., .key = "data"){
stopifnot(is.data.table(dt))
by <- substitute(list(...))
dt <- dt[, list(list(.SD)), by = eval(by)]
setnames(dt, old = "V1", new = .key)
dt
}
nested_test <- pop_test_lite[depth>0,][, group_nest_dt(.SD, position2)]
nested_test_filtered <- nested_test[,n_pops := purrr::map_dbl(data, nrow)][
n_pops>2,][,!c("n_pops"), with = FALSE]
rm(nested_test)
nested_test_filtered[, models := purrr::map(data, ~ glm(freq~latitude,
weights = NE,
data = .x,
family = binomial()))]
nested_test_filtered
nested_test_filtered_lite <- nested_test_filtered[1:1000,]
nested_test_filtered_lite[, models := purrr::map(data, ~ glm(freq~latitude,
weights = NE,
data = .x,
family = binomial()))]
nested_test_filtered_lite
nested_test_filtered_lite[, coefficients := purrr::map_dbl(models, ~coef(.x) %>% pluck("latitude")) ]
library(tidyverse)
nested_test_filtered_lite[, coefficients := purrr::map_dbl(models, ~coef(.x) %>% pluck("latitude")) ]
nested_test_filtered_lite[, p_value := purrr::map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8))]
nested_test_filtered_lite
nested_test_filtered_lite[, !c("models")]
nested_test_filtered_lite <- nested_test_filtered_lite[, !c("models")]
#for unnesting
unnest_dt <- function(dt, col, id){
stopifnot(is.data.table(dt))
by <- substitute(id)
col <- substitute(unlist(col, recursive = FALSE))
dt[, eval(col), by = eval(by)]
}
unnest_dt(nested_test_filtered_lite,
col = data,
id = list(position2))
unnest_dt(nested_test_filtered_lite,
col = data,
id = list(position2, coefficients, p_value))
library(data.table)
library(tidyverse)
#11994070 - 2L
pop_test <- fread("/dados/time_clines/output/SNPs/joined97.tsv")
pop_test_lite <- pop_test[1:4000,]
pop_test_lite[, position2 := paste(chrom, position, sep = ":")]
pop_test_lite <- pop_test_lite[, !c("chrom", "position")]
#tidyverse and data.table try:
#data.table function for nesting:
group_nest_dt <- function(dt, ..., .key = "data"){
stopifnot(is.data.table(dt))
by <- substitute(list(...))
dt <- dt[, list(list(.SD)), by = eval(by)]
setnames(dt, old = "V1", new = .key)
dt
}
nested_test <- pop_test_lite[depth>0,][, group_nest_dt(.SD, position2)]
pop_test_lite <- pop_test[1:10000,]
pop_test_lite[, position2 := paste(chrom, position, sep = ":")]
pop_test_lite <- pop_test_lite[, !c("chrom", "position")]
nested_test <- pop_test_lite[depth>0,][, group_nest_dt(.SD, position2)]
rm(pop_test)
nested_test_filtered <- nested_test[,n_pops := purrr::map_dbl(data, nrow)][
n_pops>2,][,!c("n_pops"), with = FALSE]
nested_test_filtered[, models := purrr::map(data, ~ glm(freq~latitude,
weights = NE,
data = .x,
family = binomial()))]
nested_test_filtered[, coefficients := purrr::map_dbl(models, ~coef(.x) %>% pluck("latitude")) ]
nested_test_filtered[, p_value := purrr::map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8))]
nested_test_filtered <- nested_test_filtered[, !c("models")]
nested_test_filtered
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library("devtools")
library("devtools")
install.packages("devtools")
library("devtools")
install_github("jdstorey/qvalue")
devtools::install_github(repo = "r-lib/devtools",
dependencies = TRUE,
upgrade = TRUE)
remotes::install_github(repo = "r-lib/devtools",
dependencies = TRUE,
upgrade = TRUE)
library("devtools")
remotes::install_github(repo = "r-lib/devtools",
dependencies = TRUE,
upgrade = TRUE)
install.packages("devtools")
library("devtools")
install_github("jdstorey/qvalue")
browseVignettes(package = "qvalue")
library(qvalue)
browseVignettes(package = "qvalue")
qvalue()
library(data.table)
library(tidyverse)
library(qvalue)
nested_test_filtered
p_values <- nested_test_filtered$p_value
qobj <- qvalue(p = p_values)
qobj
summary(qobj)
hist(qobj)
plot(qobj)
p.adjust(p_values, method = "BH")
qobj$qvalues
q_valuesBH <- p.adjust(p_values, method = "BH")
q_valuesBH[1:10]
qobj$qvalues[1:10]
sum(q_valuesBH <= .1)
sum(qobj$qvalues <= .1)
sum(q_valuesBH <= .2)
sum(qobj$qvalues <= .2)
summary(qobj)
?qvalue::`summary,`
sum(qobj$qvalues <= 0.1)
sum(qobj$qvalues <= 0.01)
sum(qobj$qvalues <= 0.05)
sum(qobj$pvalues <= 0.05)
summary(qobj, cuts = c(0.1, 0.2, 0.3))
qplot(qobj)
plot(qobj)
max(qobj$pvalues[qobj$qvalues <= 0.05])
sum(qobj$pvalues[qobj$qvalues <= 0.05])
max(qobj$qvalues[qobj$pvalues <= 0.01])
#11994070 - 2L
pop_test <- fread("/dados/time_clines/output/SNPs/joined97.tsv")
pop_test_lite <- pop_test[chrom == 2L,]
pop_test_lite <- pop_test[chrom == "2L",]
pop_test_lite[, position2 := paste(chrom, position, sep = ":")]
pop_test_lite <- pop_test_lite[, !c("chrom", "position")]
#tidyverse and data.table try:
#data.table function for nesting:
group_nest_dt <- function(dt, ..., .key = "data"){
stopifnot(is.data.table(dt))
by <- substitute(list(...))
dt <- dt[, list(list(.SD)), by = eval(by)]
setnames(dt, old = "V1", new = .key)
dt
}
nested_test <- pop_test_lite[depth>0,][, group_nest_dt(.SD, position2)]
nested_test_filtered <- nested_test[,n_pops := purrr::map_dbl(data, nrow)][
n_pops>2,][,!c("n_pops"), with = FALSE]
rm(pop_test)
nested_test_filtered[, models := purrr::map(data, ~ glm(freq~latitude,
weights = NE,
data = .x,
family = binomial()))]
nested_test_filtered[, coefficients := purrr::map_dbl(models, ~coef(.x) %>% pluck("latitude")) ]
nested_test_filtered[, p_value := purrr::map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8))]
nested_test_filtered <- nested_test_filtered[, !c("models")]
p_values <- nested_test_filtered$p_value
qobj <- qvalue(p = p_values)
summary(qobj, cuts = c(0.1, 0.2, 0.3))
hist(qobj)
plot(qobj)
#Estimating a p-value cut-off for a given false discovery rate level
max(qobj$pvalues[qobj$qvalues <= 0.05])
#Estimating the false discovery rate for a given p-value cut-off
max(qobj$qvalues[qobj$pvalues <= 0.01])
nested_test_filtered
#Estimating a p-value cut-off for a given false discovery rate level
p_value_cutoff <- max(qobj$pvalues[qobj$qvalues <= 0.1])
nested_test_filtered[p-value <= p_value_cutoff,]
nested_test_filtered[p_value <= p_value_cutoff,]
?png
?savePlot
?pdf
hist(qobj
)
pdf("hist_test.pdf")
ggsave("hist_test.pdf")
ggsave("hist_test.png")
?fwrite
head(nested_test_filtered, n = 10)
library(argparse)
library(tidyverse)
library(data.table)
library(qvalue)
nested_test_filtered
typeof(nested_test_filtered)
typeof(nested_test_filtered$position2)
typeof(nested_test_filtered$coefficients)
typeof(nested_test_filtered$p_value)
typeof(nested_test_filtered$p_value)
nested_test_filtered <- nested_test_filtered[, !c("data")]
typeof(nested_test_filtered)
as.data.frame(nested_test_filtered)
typeof(nested_test_filtered)
library(data.table)
library(tidyverse)
library(qvalue)
nested_test_filtered
class(nested_test_filtered)
nested_test_filtered[1]
class(nested_test_filtered[1])
fwrite(nested_test_filtered, "fwrite_test.tsv", sep = "\t")
p_values <- nested_test_filtered$p_value
qobj <- qvalue(p = p_values)
#Estimating a p-value cut-off for a given false discovery rate level
p_value_cutoff <- max(qobj$pvalues[qobj$qvalues <= 0.1])
nested_test_filtered[p_value <= p_value_cutoff,]
class(significant_snps)
significant_snps <- nested_test_filtered[p_value <= p_value_cutoff,]
class(significant_snps)
typeof(significant_snps)
typeof(nested_test_filtered)
fwrite(significant_snps, "fwrite_test.tsv", sep = "\t")
class(significant_snps$position2)
class(significant_snps$coefficients)
class(significant_snps$p_value)
typeof(significant_snps$position2)
typeof(significant_snps$coefficients)
typeof(significant_snps$p_value)
joined_pops <- "/dados/time_clines/output/SNPs/joined97.tsv"
joined_pops <- "/dados/time_clines/output/SNPs/joined97.tsv"
#reads data and joins chrom and position
joined_pops <- fread(file = joined_pops)
joined_pops <- joined_pops[chrom == "3L",] #just a test line
joined_pops[, position2 := paste(chrom, position, sep = ":")]
joined_pops <- joined_pops[, !c("chrom", "position")]
#data.table function for nesting:
group_nest_dt <- function(dt, ..., .key = "data"){
stopifnot(is.data.table(dt))
by <- substitute(list(...))
dt <- dt[, list(list(.SD)), by = eval(by)]
setnames(dt, old = "V1", new = .key)
dt
}
#filters calls with depth = 0
#nest data by snp
#filter out snps that were only called in two or less pops
nested_snps <- joined_pops[depth>0,][,group_nest_dt(.SD, position2)][,
n_pops := purrr::map_dbl(data, nrow)][
n_pops>2,][,
!c("n_pops"), with = FALSE]
#runs glm for each snp
nested_snps[, models := purrr::map(data, ~ glm(freq~latitude,
weights = NE,
data = .x,
family = binomial()))]
nested_snps
#drop data column
nested_snps <- nested_snps[, !c("data")]
nested_snps
#gets lat coefficient
nested_snps[, coefficients := purrr::map_dbl(models, ~coef(.x) %>% pluck("latitude")) ]
#gets p-value
nested_snps[, p_value := purrr::map_dbl(models,
~summary(.x) %>%
pluck("coefficients") %>% pluck(8))]
nested_snps
#drops models column (it is too heavy)
nested_snps[, !c("models")]
nested_snps
install.packages("rmarkdown")
library(rmarkdown)
library(data.table)
?fread
